{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nvar CountdownClockComponent = /** @class */function () {\n  function CountdownClockComponent() {\n    this.timedOutEvent = new EventEmitter();\n    this.progressBar = null;\n    this.indicator = null;\n    this.pointer = null;\n    this.length = Math.PI * 2 * 100;\n    this.displayOutput = null;\n    this.wholeTime = 60; // for 60 seconds\n    this.isStarted = false;\n    this.countdownClip = new Audio('../../assets/10-second-countdown.mp3');\n  }\n  CountdownClockComponent.prototype.ngOnInit = function () {\n    this.setupTimer();\n    this.update(this.wholeTime, this.wholeTime); // refreshes progress bar\n    this.displayTimeLeft(this.wholeTime);\n    this.timer(this.wholeTime);\n    this.countdownClip.load();\n  };\n  CountdownClockComponent.prototype.setupTimer = function () {\n    this.progressBar = document.querySelector('.e-c-progress');\n    this.indicator = document.getElementById('e-indicator');\n    this.pointer = document.getElementById('e-pointer');\n    this.displayOutput = document.querySelector('.display-remain-time');\n    this.progressBar.style.strokeDasharray = this.length;\n  };\n  CountdownClockComponent.prototype.timer = function (seconds) {\n    var _this = this;\n    // counts time, takes seconds\n    var remainTime = Date.now() + seconds * 1000;\n    this.displayTimeLeft(seconds);\n    this.intervalTimer = setInterval(function () {\n      var timeLeft = Math.round((remainTime - Date.now()) / 1000);\n      if (timeLeft < 0) {\n        clearInterval(_this.intervalTimer);\n        _this.isStarted = false;\n        _this.displayTimeLeft(_this.wholeTime);\n        _this.timedOutEvent.emit();\n        return;\n      }\n      _this.displayTimeLeft(timeLeft);\n    }, 1000);\n  };\n  CountdownClockComponent.prototype.update = function (value, timePercent) {\n    var offset = -this.length - this.length * value / timePercent;\n    this.progressBar.style.strokeDashoffset = offset;\n    this.pointer.style.transform = \"rotate(\".concat(360 * value / timePercent, \"deg)\");\n    this.updateColorIndicator(360 * value / timePercent);\n  };\n  CountdownClockComponent.prototype.updateColorIndicator = function (degValue) {\n    if (degValue <= 360 && degValue > 270) {\n      this.displayOutput.style.color = 'green';\n      this.progressBar.style.stroke = 'green';\n    } else if (degValue <= 270 && degValue > 180) {\n      this.displayOutput.style.color = 'green';\n      this.progressBar.style.stroke = 'green';\n    } else if (degValue <= 180 && degValue > 90) {\n      this.displayOutput.style.color = 'orange';\n      this.progressBar.style.stroke = 'orange';\n    } else {\n      this.displayOutput.style.color = 'red';\n      this.progressBar.style.stroke = 'red';\n    }\n  };\n  CountdownClockComponent.prototype.displayTimeLeft = function (timeLeft) {\n    //displays time on the input\n    var minutes = Math.floor(timeLeft / 60);\n    var seconds = timeLeft % 60;\n    var displayString = \"\".concat(minutes < 10 ? '0' : '').concat(minutes, \":\").concat(seconds < 10 ? '0' : '').concat(seconds);\n    this.displayOutput.textContent = displayString;\n    if (seconds === 10) {\n      this.countdownClip.play();\n    }\n    this.update(timeLeft, this.wholeTime);\n  };\n  CountdownClockComponent.prototype.ngOnDestroy = function () {\n    clearInterval(this.intervalTimer);\n  };\n  CountdownClockComponent.ɵfac = function CountdownClockComponent_Factory(t) {\n    return new (t || CountdownClockComponent)();\n  };\n  CountdownClockComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountdownClockComponent,\n    selectors: [[\"app-countdown-clock\"]],\n    outputs: {\n      timedOutEvent: \"timedOutEvent\"\n    },\n    decls: 12,\n    vars: 0,\n    consts: [[1, \"wrapper\"], [1, \"circle\"], [\"width\", \"300\", \"viewBox\", \"0 0 500 500\", \"xmlns\", \"http://www.w3.org/2000/svg\"], [\"transform\", \"translate(360,110)\"], [\"r\", \"100\", 1, \"e-c-base\"], [\"transform\", \"rotate(-90)\"], [\"r\", \"100\", 1, \"e-c-progress\"], [\"id\", \"e-pointer\"], [\"cx\", \"100\", \"cy\", \"0\", \"r\", \"8\", 1, \"e-c-pointer\"], [1, \"controls\"], [1, \"display-remain-time\"]],\n    template: function CountdownClockComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(2, \"svg\", 2)(3, \"g\", 3);\n        i0.ɵɵelement(4, \"circle\", 4);\n        i0.ɵɵelementStart(5, \"g\", 5);\n        i0.ɵɵelement(6, \"circle\", 6);\n        i0.ɵɵelementStart(7, \"g\", 7);\n        i0.ɵɵelement(8, \"circle\", 8);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(9, \"div\", 9)(10, \"div\", 10);\n        i0.ɵɵtext(11, \" 00:30 \");\n        i0.ɵɵelementEnd()()()();\n      }\n    },\n    styles: [\".wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .e-c-base[_ngcontent-%COMP%]{fill:none;stroke:#b6b6b6;stroke-width:4px}.wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .e-c-progress[_ngcontent-%COMP%]{fill:none;stroke:#f7958e;stroke-width:4px;transition:stroke-dashoffset .7s}.wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .e-c-pointer[_ngcontent-%COMP%]{fill:#fff;stroke:#f7958e;stroke-width:2px}.wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   #e-pointer[_ngcontent-%COMP%]{transition:transform .7s}.wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .controls[_ngcontent-%COMP%]{left:75px;top:105px;text-align:center}.wrapper[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .controls[_ngcontent-%COMP%]   .display-remain-time[_ngcontent-%COMP%]{font-family:Roboto;font-weight:100;font-size:65px;color:#f7958e;font-size:2.5rem;transform:translate(64px,-260px)}\"]\n  });\n  return CountdownClockComponent;\n}();\nexport { CountdownClockComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}